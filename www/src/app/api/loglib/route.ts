//generated by loglib
import { createServerRoutes } from "@loglib/next"
import { getCurrentUser } from "@/lib/session"
import { kyselyAdapter } from "@/lib/db/kysely-adapter"
import { db } from "@/server/db"
import { siteConfig } from "@/config/site"

export const { GET, POST, OPTIONS } = createServerRoutes({
  adapter: kyselyAdapter(db),
  disableLocation: process.env.NODE_ENV === "development" ? true : false,
  environment: process.env.NODE_ENV === "development" ? "test" : "production",
  middleware: async (req, options, next) => {
    const { websiteId } = req.method === "GET" ? req.query : req.body
    if (!websiteId) {
      return {
        message: "WebsiteId not specified",
        code: 400,
      }
    }
    const id = websiteId as string
    if (req.method === "GET") {
      const user = await getCurrentUser()
      if (!user) return { message: "Unauthorized", code: 401 }
      const website = await db
        .selectFrom("website")
        .where("id", "=", id)
        .selectAll()
        .execute()
      if (!website) {
        const teamWebsite = await db
          .selectFrom("team_website")
          .where("website_id", "=", id)
          .selectAll()
          .executeTakeFirst()
        if (!teamWebsite)
          return {
            message: "Website not found",
            code: 400,
          }
        const team = await db
          .selectFrom("team_users")
          .where("user_id", "=", user.id)
          .where("team_id", "=", teamWebsite?.team_id)
          .selectAll()
          .execute()
        if (!team) {
          return {
            message: "Website not found",
            code: 400,
          }
        }
      }
    }
    if (req.method === "POST") {
      let origin: string =
        process.env.NODE_ENV === "development"
          ? siteConfig.url
          : req.headers.origin || req.headers.host || req.headers.referer
      const site = await db
        .selectFrom("website")
        .where("id", "=", id)
        .select("id")
        .select("url")
        .executeTakeFirst()
      if (!site) {
        return {
          message: "Website not found",
          code: 400,
        }
      }
      //origin check
      const url = new URL(site.url.replace(/\/$/, "").replace("www.", ""))
      origin = new URL(origin.replace(/\/$/, "").replace("www.", "")).origin
      console.log(url.origin, origin)
      if (url.origin !== origin) {
        return {
          message: "Website not found",
          code: 400,
        }
      }
    }
    return await next(req, options)
  },
})
